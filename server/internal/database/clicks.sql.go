// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clicks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createClick = `-- name: CreateClick :one
INSERT INTO clicks (
    id,
    url_id, 
    created_at, 
    continent, 
    country, 
    region, 
    city, 
    lat, 
    lon, 
    timezone, 
    currency, 
    referral_url, 
    is_mobile, 
    is_proxy, 
    isp
)
VALUES (
    GEN_RANDOM_UUID(),
    $1,
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13
)
RETURNING id, url_id, created_at, continent, country, region, city, lat, lon, timezone, currency, referral_url, is_mobile, is_proxy, isp
`

type CreateClickParams struct {
	UrlID       sql.NullString
	Continent   sql.NullString
	Country     sql.NullString
	Region      sql.NullString
	City        sql.NullString
	Lat         sql.NullFloat64
	Lon         sql.NullFloat64
	Timezone    sql.NullString
	Currency    sql.NullString
	ReferralUrl sql.NullString
	IsMobile    sql.NullBool
	IsProxy     sql.NullBool
	Isp         sql.NullString
}

func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) (Click, error) {
	row := q.db.QueryRowContext(ctx, createClick,
		arg.UrlID,
		arg.Continent,
		arg.Country,
		arg.Region,
		arg.City,
		arg.Lat,
		arg.Lon,
		arg.Timezone,
		arg.Currency,
		arg.ReferralUrl,
		arg.IsMobile,
		arg.IsProxy,
		arg.Isp,
	)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.CreatedAt,
		&i.Continent,
		&i.Country,
		&i.Region,
		&i.City,
		&i.Lat,
		&i.Lon,
		&i.Timezone,
		&i.Currency,
		&i.ReferralUrl,
		&i.IsMobile,
		&i.IsProxy,
		&i.Isp,
	)
	return i, err
}

const getClickByID = `-- name: GetClickByID :one
SELECT id, url_id, created_at, continent, country, region, city, lat, lon, timezone, currency, referral_url, is_mobile, is_proxy, isp FROM clicks WHERE id=$1
`

func (q *Queries) GetClickByID(ctx context.Context, id uuid.UUID) (Click, error) {
	row := q.db.QueryRowContext(ctx, getClickByID, id)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.CreatedAt,
		&i.Continent,
		&i.Country,
		&i.Region,
		&i.City,
		&i.Lat,
		&i.Lon,
		&i.Timezone,
		&i.Currency,
		&i.ReferralUrl,
		&i.IsMobile,
		&i.IsProxy,
		&i.Isp,
	)
	return i, err
}

const getClicksByURLID = `-- name: GetClicksByURLID :many
SELECT id, url_id, created_at, continent, country, region, city, lat, lon, timezone, currency, referral_url, is_mobile, is_proxy, isp FROM clicks WHERE url_id=$1
`

func (q *Queries) GetClicksByURLID(ctx context.Context, urlID sql.NullString) ([]Click, error) {
	rows, err := q.db.QueryContext(ctx, getClicksByURLID, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Click
	for rows.Next() {
		var i Click
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.CreatedAt,
			&i.Continent,
			&i.Country,
			&i.Region,
			&i.City,
			&i.Lat,
			&i.Lon,
			&i.Timezone,
			&i.Currency,
			&i.ReferralUrl,
			&i.IsMobile,
			&i.IsProxy,
			&i.Isp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
