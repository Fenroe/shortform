// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: urls.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkForURLWithID = `-- name: CheckForURLWithID :one
SELECT COUNT(*) FROM urls WHERE id=$1
`

func (q *Queries) CheckForURLWithID(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkForURLWithID, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createURL = `-- name: CreateURL :one
INSERT INTO urls (id, user_id, created_at, updated_at, expired_at, destination)
VALUES (
    $1,
    $2,
    NOW(),
    NOW(),
    $3,
    $4
)
RETURNING id, destination, created_at, updated_at, expired_at, user_id, key_id
`

type CreateURLParams struct {
	ID          string
	UserID      uuid.NullUUID
	ExpiredAt   sql.NullTime
	Destination string
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.ID,
		arg.UserID,
		arg.ExpiredAt,
		arg.Destination,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.UserID,
		&i.KeyID,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls WHERE id=$1
`

func (q *Queries) DeleteURL(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteURL, id)
	return err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, destination, created_at, updated_at, expired_at, user_id, key_id FROM urls WHERE id=$1
`

func (q *Queries) GetURLByID(ctx context.Context, id string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.UserID,
		&i.KeyID,
	)
	return i, err
}

const getURLsByAPIKey = `-- name: GetURLsByAPIKey :many
SELECT id, destination, created_at, updated_at, expired_at, user_id, key_id FROM urls WHERE key_id=$1
`

func (q *Queries) GetURLsByAPIKey(ctx context.Context, keyID sql.NullString) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLsByAPIKey, keyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.UserID,
			&i.KeyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLsByDestination = `-- name: GetURLsByDestination :many
SELECT id, destination, created_at, updated_at, expired_at, user_id, key_id FROM urls WHERE user_id=$1 AND destination=$2
`

type GetURLsByDestinationParams struct {
	UserID      uuid.NullUUID
	Destination string
}

func (q *Queries) GetURLsByDestination(ctx context.Context, arg GetURLsByDestinationParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLsByDestination, arg.UserID, arg.Destination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.UserID,
			&i.KeyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, destination, created_at, updated_at, expired_at, user_id, key_id FROM urls WHERE user_id=$1
`

func (q *Queries) GetURLsByUserID(ctx context.Context, userID uuid.NullUUID) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.UserID,
			&i.KeyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateURL = `-- name: UpdateURL :exec
UPDATE urls 
SET expired_at=$1,destination=$2,updated_at=NOW() 
WHERE id=$3
`

type UpdateURLParams struct {
	ExpiredAt   sql.NullTime
	Destination string
	ID          string
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) error {
	_, err := q.db.ExecContext(ctx, updateURL, arg.ExpiredAt, arg.Destination, arg.ID)
	return err
}

const updateURLsWithUserID = `-- name: UpdateURLsWithUserID :exec
UPDATE urls
SET user_id=$1,key_id=NULL,updated_at=NOW()
WHERE key_id=$2
`

type UpdateURLsWithUserIDParams struct {
	UserID uuid.NullUUID
	KeyID  sql.NullString
}

func (q *Queries) UpdateURLsWithUserID(ctx context.Context, arg UpdateURLsWithUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updateURLsWithUserID, arg.UserID, arg.KeyID)
	return err
}
